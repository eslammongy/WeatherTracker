// Mocks generated by Mockito 5.4.4 from annotations
// in weather_tracker/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:convert' as _i17;
import 'dart:typed_data' as _i19;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dio/dio.dart' as _i3;
import 'package:http/http.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i18;
import 'package:weather_tracker/core/error/api_failure.dart' as _i9;
import 'package:weather_tracker/features/weather/data/datasource/local/weather_db_box.dart'
    as _i12;
import 'package:weather_tracker/features/weather/data/datasource/remote/weather_api_service.dart'
    as _i11;
import 'package:weather_tracker/features/weather/data/models/weather_model.dart'
    as _i4;
import 'package:weather_tracker/features/weather/domain/entities/weather_data.dart'
    as _i13;
import 'package:weather_tracker/features/weather/domain/entities/weather_entity.dart'
    as _i10;
import 'package:weather_tracker/features/weather/domain/repository/weather_repository.dart'
    as _i6;
import 'package:weather_tracker/features/weather/domain/usecaces/fetch_city_weather_use_case.dart'
    as _i14;
import 'package:weather_tracker/features/weather/domain/usecaces/fetch_current_weather_use_case.dart'
    as _i16;
import 'package:weather_tracker/features/weather/domain/usecaces/fetch_forecast_weather_use_case.dart'
    as _i15;
import 'package:weather_tracker/objectbox.g.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_1 extends _i1.SmartFake implements _i3.Dio {
  _FakeDio_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherModel_2 extends _i1.SmartFake implements _i4.WeatherModel {
  _FakeWeatherModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseOptions_3 extends _i1.SmartFake implements _i3.BaseOptions {
  _FakeBaseOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientAdapter_4 extends _i1.SmartFake
    implements _i3.HttpClientAdapter {
  _FakeHttpClientAdapter_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransformer_5 extends _i1.SmartFake implements _i3.Transformer {
  _FakeTransformer_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInterceptors_6 extends _i1.SmartFake implements _i3.Interceptors {
  _FakeInterceptors_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_7<T1> extends _i1.SmartFake implements _i3.Response<T1> {
  _FakeResponse_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStore_8 extends _i1.SmartFake implements _i5.Store {
  _FakeStore_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_9<T> extends _i1.SmartFake implements _i5.Box<T> {
  _FakeBox_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWeatherRepository_10 extends _i1.SmartFake
    implements _i6.WeatherRepository {
  _FakeWeatherRepository_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_11 extends _i1.SmartFake implements _i7.Response {
  _FakeResponse_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_12 extends _i1.SmartFake
    implements _i7.StreamedResponse {
  _FakeStreamedResponse_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WeatherRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherRepository extends _i1.Mock implements _i6.WeatherRepository {
  MockWeatherRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>
      fetchHourlyWeatherInfo({
    required double? lat,
    required double? lon,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #fetchHourlyWeatherInfo,
              [],
              {
                #lat: lat,
                #lon: lon,
              },
            ),
            returnValue:
                _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                    _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
              this,
              Invocation.method(
                #fetchHourlyWeatherInfo,
                [],
                {
                  #lat: lat,
                  #lon: lon,
                },
              ),
            )),
          ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);

  @override
  _i8.Future<
      _i2
      .Either<_i9.ServerFailure, _i10.WeatherEntity>> fetchForecastWeatherInfo({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchForecastWeatherInfo,
          [],
          {
            #lat: lat,
            #lon: lon,
          },
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.ServerFailure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.ServerFailure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #fetchForecastWeatherInfo,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.ServerFailure, _i10.WeatherEntity>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>
      fetchWeatherByCityName({required String? name}) => (super.noSuchMethod(
            Invocation.method(
              #fetchWeatherByCityName,
              [],
              {#name: name},
            ),
            returnValue:
                _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                    _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
              this,
              Invocation.method(
                #fetchWeatherByCityName,
                [],
                {#name: name},
              ),
            )),
          ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, int>> saveWeatherDataLocally(
          {required _i10.WeatherEntity? data}) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveWeatherDataLocally,
          [],
          {#data: data},
        ),
        returnValue: _i8.Future<_i2.Either<_i9.Failure, int>>.value(
            _FakeEither_0<_i9.Failure, int>(
          this,
          Invocation.method(
            #saveWeatherDataLocally,
            [],
            {#data: data},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, int>>);

  @override
  _i8.Future<_i2.Either<_i9.Failure, List<_i10.WeatherEntity>>>
      fetchLocallyWeatherData() => (super.noSuchMethod(
            Invocation.method(
              #fetchLocallyWeatherData,
              [],
            ),
            returnValue: _i8.Future<
                    _i2.Either<_i9.Failure, List<_i10.WeatherEntity>>>.value(
                _FakeEither_0<_i9.Failure, List<_i10.WeatherEntity>>(
              this,
              Invocation.method(
                #fetchLocallyWeatherData,
                [],
              ),
            )),
          ) as _i8.Future<_i2.Either<_i9.Failure, List<_i10.WeatherEntity>>>);
}

/// A class which mocks [WeatherApiServices].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherApiServices extends _i1.Mock
    implements _i11.WeatherApiServices {
  MockWeatherApiServices() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Dio get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeDio_1(
          this,
          Invocation.getter(#client),
        ),
      ) as _i3.Dio);

  @override
  _i8.Future<_i4.WeatherModel> getCurrentHourlyWeather({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentHourlyWeather,
          [],
          {
            #lat: lat,
            #lon: lon,
          },
        ),
        returnValue: _i8.Future<_i4.WeatherModel>.value(_FakeWeatherModel_2(
          this,
          Invocation.method(
            #getCurrentHourlyWeather,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
      ) as _i8.Future<_i4.WeatherModel>);

  @override
  _i8.Future<_i4.WeatherModel> getForecastWeather({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getForecastWeather,
          [],
          {
            #lat: lat,
            #lon: lon,
          },
        ),
        returnValue: _i8.Future<_i4.WeatherModel>.value(_FakeWeatherModel_2(
          this,
          Invocation.method(
            #getForecastWeather,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
      ) as _i8.Future<_i4.WeatherModel>);

  @override
  _i8.Future<_i4.WeatherModel> getWeatherByCityName({required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWeatherByCityName,
          [],
          {#name: name},
        ),
        returnValue: _i8.Future<_i4.WeatherModel>.value(_FakeWeatherModel_2(
          this,
          Invocation.method(
            #getWeatherByCityName,
            [],
            {#name: name},
          ),
        )),
      ) as _i8.Future<_i4.WeatherModel>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i3.Dio {
  MockDio() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.BaseOptions get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: _FakeBaseOptions_3(
          this,
          Invocation.getter(#options),
        ),
      ) as _i3.BaseOptions);

  @override
  set options(_i3.BaseOptions? _options) => super.noSuchMethod(
        Invocation.setter(
          #options,
          _options,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.HttpClientAdapter get httpClientAdapter => (super.noSuchMethod(
        Invocation.getter(#httpClientAdapter),
        returnValue: _FakeHttpClientAdapter_4(
          this,
          Invocation.getter(#httpClientAdapter),
        ),
      ) as _i3.HttpClientAdapter);

  @override
  set httpClientAdapter(_i3.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(
          #httpClientAdapter,
          _httpClientAdapter,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Transformer get transformer => (super.noSuchMethod(
        Invocation.getter(#transformer),
        returnValue: _FakeTransformer_5(
          this,
          Invocation.getter(#transformer),
        ),
      ) as _i3.Transformer);

  @override
  set transformer(_i3.Transformer? _transformer) => super.noSuchMethod(
        Invocation.setter(
          #transformer,
          _transformer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Interceptors get interceptors => (super.noSuchMethod(
        Invocation.getter(#interceptors),
        returnValue: _FakeInterceptors_6(
          this,
          Invocation.getter(#interceptors),
        ),
      ) as _i3.Interceptors);

  @override
  void close({bool? force = false}) => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
          {#force: force},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i8.Future<_i3.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #head,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #headUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #headUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #getUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #postUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #put,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #putUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #putUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #patch,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #patchUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #delete,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i3.Options? options,
    _i3.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUri,
          [uri],
          {
            #data: data,
            #options: options,
            #cancelToken: cancelToken,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #deleteUri,
            [uri],
            {
              #data: data,
              #options: options,
              #cancelToken: cancelToken,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i3.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i3.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i3.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #download,
          [
            urlPath,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i8.Future<_i3.Response<dynamic>>.value(_FakeResponse_7<dynamic>(
          this,
          Invocation.method(
            #download,
            [
              urlPath,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<dynamic>>);

  @override
  _i8.Future<_i3.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i3.ProgressCallback? onReceiveProgress,
    _i3.CancelToken? cancelToken,
    bool? deleteOnError = true,
    String? lengthHeader = r'content-length',
    Object? data,
    _i3.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadUri,
          [
            uri,
            savePath,
          ],
          {
            #onReceiveProgress: onReceiveProgress,
            #cancelToken: cancelToken,
            #deleteOnError: deleteOnError,
            #lengthHeader: lengthHeader,
            #data: data,
            #options: options,
          },
        ),
        returnValue:
            _i8.Future<_i3.Response<dynamic>>.value(_FakeResponse_7<dynamic>(
          this,
          Invocation.method(
            #downloadUri,
            [
              uri,
              savePath,
            ],
            {
              #onReceiveProgress: onReceiveProgress,
              #cancelToken: cancelToken,
              #deleteOnError: deleteOnError,
              #lengthHeader: lengthHeader,
              #data: data,
              #options: options,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<dynamic>>);

  @override
  _i8.Future<_i3.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i3.CancelToken? cancelToken,
    _i3.Options? options,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [url],
          {
            #data: data,
            #queryParameters: queryParameters,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #request,
            [url],
            {
              #data: data,
              #queryParameters: queryParameters,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i3.CancelToken? cancelToken,
    _i3.Options? options,
    _i3.ProgressCallback? onSendProgress,
    _i3.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestUri,
          [uri],
          {
            #data: data,
            #cancelToken: cancelToken,
            #options: options,
            #onSendProgress: onSendProgress,
            #onReceiveProgress: onReceiveProgress,
          },
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #requestUri,
            [uri],
            {
              #data: data,
              #cancelToken: cancelToken,
              #options: options,
              #onSendProgress: onSendProgress,
              #onReceiveProgress: onReceiveProgress,
            },
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);

  @override
  _i8.Future<_i3.Response<T>> fetch<T>(_i3.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetch,
          [requestOptions],
        ),
        returnValue: _i8.Future<_i3.Response<T>>.value(_FakeResponse_7<T>(
          this,
          Invocation.method(
            #fetch,
            [requestOptions],
          ),
        )),
      ) as _i8.Future<_i3.Response<T>>);
}

/// A class which mocks [WeatherDbBox].
///
/// See the documentation for Mockito's code generation for more information.
class MockWeatherDbBox extends _i1.Mock implements _i12.WeatherDbBox {
  MockWeatherDbBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Store get store => (super.noSuchMethod(
        Invocation.getter(#store),
        returnValue: _FakeStore_8(
          this,
          Invocation.getter(#store),
        ),
      ) as _i5.Store);

  @override
  set store(_i5.Store? _store) => super.noSuchMethod(
        Invocation.setter(
          #store,
          _store,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Box<_i10.WeatherEntity> get weatherBox => (super.noSuchMethod(
        Invocation.getter(#weatherBox),
        returnValue: _FakeBox_9<_i10.WeatherEntity>(
          this,
          Invocation.getter(#weatherBox),
        ),
      ) as _i5.Box<_i10.WeatherEntity>);

  @override
  set weatherBox(_i5.Box<_i10.WeatherEntity>? _weatherBox) =>
      super.noSuchMethod(
        Invocation.setter(
          #weatherBox,
          _weatherBox,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Box<_i13.WeatherData> get weatherDataBox => (super.noSuchMethod(
        Invocation.getter(#weatherDataBox),
        returnValue: _FakeBox_9<_i13.WeatherData>(
          this,
          Invocation.getter(#weatherDataBox),
        ),
      ) as _i5.Box<_i13.WeatherData>);

  @override
  set weatherDataBox(_i5.Box<_i13.WeatherData>? _weatherDataBox) =>
      super.noSuchMethod(
        Invocation.setter(
          #weatherDataBox,
          _weatherDataBox,
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FetchWeatherByCityNameUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchWeatherByCityNameUseCase extends _i1.Mock
    implements _i14.FetchWeatherByCityNameUseCase {
  MockFetchWeatherByCityNameUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WeatherRepository get weatherRepository => (super.noSuchMethod(
        Invocation.getter(#weatherRepository),
        returnValue: _FakeWeatherRepository_10(
          this,
          Invocation.getter(#weatherRepository),
        ),
      ) as _i6.WeatherRepository);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>> execute(
          {required String? name}) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {#name: name},
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [],
            {#name: name},
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);
}

/// A class which mocks [FetchForecastWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchForecastWeatherUseCase extends _i1.Mock
    implements _i15.FetchForecastWeatherUseCase {
  MockFetchForecastWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WeatherRepository get weatherRepository => (super.noSuchMethod(
        Invocation.getter(#weatherRepository),
        returnValue: _FakeWeatherRepository_10(
          this,
          Invocation.getter(#weatherRepository),
        ),
      ) as _i6.WeatherRepository);

  @override
  _i8.Future<_i2.Either<_i9.ServerFailure, _i10.WeatherEntity>> execute({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #lat: lat,
            #lon: lon,
          },
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.ServerFailure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.ServerFailure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.ServerFailure, _i10.WeatherEntity>>);
}

/// A class which mocks [FetchHourlyWeatherUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchHourlyWeatherUseCase extends _i1.Mock
    implements _i16.FetchHourlyWeatherUseCase {
  MockFetchHourlyWeatherUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WeatherRepository get weatherRepository => (super.noSuchMethod(
        Invocation.getter(#weatherRepository),
        returnValue: _FakeWeatherRepository_10(
          this,
          Invocation.getter(#weatherRepository),
        ),
      ) as _i6.WeatherRepository);

  @override
  _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>> execute({
    required double? lat,
    required double? lon,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
          {
            #lat: lat,
            #lon: lon,
          },
        ),
        returnValue:
            _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>.value(
                _FakeEither_0<_i9.Failure, _i10.WeatherEntity>(
          this,
          Invocation.method(
            #execute,
            [],
            {
              #lat: lat,
              #lon: lon,
            },
          ),
        )),
      ) as _i8.Future<_i2.Either<_i9.Failure, _i10.WeatherEntity>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i7.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i7.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_11(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_11(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_11(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_11(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_11(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<_i7.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i17.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i8.Future<_i7.Response>.value(_FakeResponse_11(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i8.Future<_i7.Response>);

  @override
  _i8.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<String>.value(_i18.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i8.Future<String>);

  @override
  _i8.Future<_i19.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i8.Future<_i19.Uint8List>.value(_i19.Uint8List(0)),
      ) as _i8.Future<_i19.Uint8List>);

  @override
  _i8.Future<_i7.StreamedResponse> send(_i7.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i8.Future<_i7.StreamedResponse>.value(_FakeStreamedResponse_12(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i8.Future<_i7.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
